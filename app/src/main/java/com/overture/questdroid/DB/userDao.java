package com.overture.questdroid.DB;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.overture.questdroid.DB.user;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class userDao extends AbstractDao<user, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity user.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ID = new Property(1, long.class, "ID", false, "ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Avatarurl = new Property(3, String.class, "Avatarurl", false, "AVATARURL");
        public final static Property Coin = new Property(4, Long.class, "coin", false, "COIN");
    };


    public userDao(DaoConfig config) {
        super(config);
    }
    
    public userDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID' INTEGER NOT NULL ," + // 1: ID
                "'USERNAME' TEXT NOT NULL ," + // 2: username
                "'AVATARURL' TEXT," + // 3: Avatarurl
                "'COIN' INTEGER);"); // 4: coin
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, user entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getID());
        stmt.bindString(3, entity.getUsername());
 
        String Avatarurl = entity.getAvatarurl();
        if (Avatarurl != null) {
            stmt.bindString(4, Avatarurl);
        }
 
        Long coin = entity.getCoin();
        if (coin != null) {
            stmt.bindLong(5, coin);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public user readEntity(Cursor cursor, int offset) {
        user entity = new user( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // ID
            cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Avatarurl
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // coin
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, user entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setID(cursor.getLong(offset + 1));
        entity.setUsername(cursor.getString(offset + 2));
        entity.setAvatarurl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCoin(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(user entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(user entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
